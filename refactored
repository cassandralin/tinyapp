const express = require("express");
const app = express();
const PORT = 8080; // default port 8080
const cookieSession = require('cookie-session');
const bcrypt = require('bcrypt');
const getUserByEmail = require("./helpers");
const generateRandomString = require("./helpers");
const findUserByUrl = require("./helpers");
const checkUser = require("./helpers");

const bodyParser = require("body-parser");
app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({extended: true})); //convert request body from buffer into string then add data to the req(request) object under the key body
app.use(cookieSession({
  name: 'session',
  keys: ['key1', 'key2']
}));

const users = {
  "userRandomID": {
    id: "userRandomID",
    email: "a@a.com",
    password: bcrypt.hashSync("a", 10) //change to hashedPassword
  },
  "user2RandomID": {
    id: "user2RandomID",
    email: "user2@gmail.com",
    password: bcrypt.hashSync("a", 10) //change to hashedPassword
  }
};

const urlDatabase = {
  "b2xVn2": { longURL: "http://www.lighthouselabs.ca", userID: ["userRandomID"] },
  "9sm5xK": { longURL: "http://www.google.com", userID: ["userRandomID"] }
};

app.get("/", (req, res) => {
  res.send("Hello!");
});

app.get("/hello", (req, res) => {
  res.send("<html><body>Hello <b>World</b></body></html>\n");
});

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});

app.get("/urls", (req, res) => {
  let templateVars = { urls: urlDatabase, user: users[req.session["user_id"]] };
  if (!req.session["user_id"]) { //if there is no user id cookie-then the user is not logged in
    res.redirect("/login");  // want to redirect them to login page
  } else {
    let templateVars  = { user: users[req.session["user_id"]] };
    res.render("urls_new", templateVars)
  }
});

app.get("/urls/new", (req, res) => { //need to put urls/new before urls/:shortURL or else it won't reach urls/new
  if (!req.session["user_id"]) { //if no cookie exists-no one is logged in
    res.redirect("/login"); //redirect them to login
  } else {
    let templateVars  = { user: users[req.session["user_id"]] };
    res.render("urls_new", templateVars);
  }
});

app.get("/urls/:shortURL", (req, res) => {
  let templateVars = { shortURL: req.params.shortURL, longURL: urlDatabase[req.params.shortURL].longURL, user: users[req.cookies["user_id"]]}; //urlDatabase is object, shortURL is the key to access longURL
  res.render("urls_show", templateVars);
});

app.post("/urls", (req, res) => {
  if (!req.session["user_id"]) { // if there is no user cookie
    res.redirect("/login"); // want them to login
  } else if (findUserByUrl(req.body.longURL, urlDatabase) === undefined) {
    let randomString = generateRandomString();
    urlDatabase[randomString] = {"longURL": req.body.longURL, "userID": req.session.user_id };
    res.redirect("/urls/" + randomString);
  } else if (findUserByUrl(req.body.longURL, urlDatabase) !== undefined) {
    if (!findUserByUrl(req.body.longURL, urlDatabase).userID.includes(req.session.user_id)) {
      urlDatabase[findUserByUrl(req.body.longURL, urlDatabase)].userID.push(req.session.user_id);
    }
    res.redirect("/urls/" + findUserByUrl(req.body.longURL, urlDatabase));
  }
});

app.get("/u/:shortURL", (req, res) => {
  res.redirect(urlDatabase[req.params.shortURL].longURL);
});

app.post('/urls/:shortURL/delete', (req, res) => {
  if (!req.session.user_id) { //if no cookie exists, no one is logged in
    res.redirect("/urls");  //direct them to urls
  } else {
    const user = checkUser(req.session.user_id, users); //use helper function to check if the cookie matches the users
    if (user) {
      if (urlDatabase[req.params.shortURL].userID[0] === user.id) { //returns the correct user check if the id matches
        delete urlDatabase[req.params.shortURL]; //they can then delete
        res.redirect("/urls"); //then redirect to urls
      } else {
        res.redirect("/urls");
      }
    } else {
      res.redirect("/urls");
    }
  }
});

app.get("/register", (req, res) => {
  let templateVars  = { urls:urlDatabase, user: users[req.session["user_id"]] };
  res.render("urls_registration", templateVars);
});

app.post('/urls/:id', (req, res) => {
  if (req.session.user_id) { // req.cookie["user_id"]//if the cookie exists
    const id = req.params.id;
    const longURL = req.body.URL;
    urlDatabase[id] = {longURL, userID: req.session.user_id}; //correct
    res.redirect("/urls");
  } else {
    res.redirect("/urls");
  }
});

app.post('/logout', (req, res) => {
  res.clearCookie("user_id");
  res.redirect("/urls");
});

app.get("/register", (req, res) => {
  let templateVars  = { user: req.session.user_id };
  res.render("urls_registration", templateVars);
});

app.post("/register", (req, res) => {
  let userEmail = req.body.email;
  let userPassword = req.body.password;
  if (userEmail === "" || userPassword === "") {
    res.send('400: Information not found', 400);
  } else if (getUserByEmail(req.body.email, users)) {
    res.redirect("/login");
  } else {
    let userID = generateRandomString();
    users[userID] = {
      id: userID,
      email: userEmail,
      password: bcrypt.hashSync(userPassword, 10)
    };
    req.session.user_id = userID;
    res.redirect("/urls");
  }
});

app.get("/login", (req, res) => {
  let templateVars  = { user: req.session.user_id }; //before user: users[req.cookies["user_id"]]
    res.render("urls_login", templateVars);
});

app.post("/login", (req, res) => {
  let user = getUserByEmail(req.body.email, users);
  if (user && bcrypt.compareSync(req.body.password, user.password)) {
    req.session.user_id = user.id;
    res.redirect("/urls");
  } else {
    res.send('403: Forbidden', 403);
  }
});
